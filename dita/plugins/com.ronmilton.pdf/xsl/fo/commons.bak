<?xml version='1.0' encoding='utf-8'?>
<xsl:stylesheet exclude-result-prefixes="ditaarch opentopic e dita-ot opentopic-func" version="2.0" xmlns:dita-ot="http://dita-ot.sourceforge.net/ns/201007/dita-ot" xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xmlns:e="com.ronmilton.pdf" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:opentopic="http://www.idiominc.com/opentopic" xmlns:opentopic-func="http://www.idiominc.com/opentopic/exsl/function" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template name="getChapterPrefix">
    <xsl:variable as="element()*" name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)" />
    <xsl:variable as="element()*" name="chapter" select="$topicref/ancestor-or-self::*[contains(@class, ' map/topicref ')]&#xA;                                                                                    [parent::opentopic:map or&#xA;                                                                                     parent::*[contains(@class, ' bookmap/part ')] or&#xA;                                                                                     parent::*[contains(@class, ' bookmap/appendices ')]][1]" />
    <xsl:variable as="node()*" name="number">
      <xsl:apply-templates mode="topicTitleNumber" select="$chapter[1]" />
    </xsl:variable>
    <xsl:if test="exists($number)">
      <xsl:copy-of select="$number" />
      <xsl:text>â€“</xsl:text>
    </xsl:if>
  </xsl:template>
  <!--title numbering-->
  <xsl:variable name="e:number-levels" select="(true(), false(), false(), false())" />
  <xsl:template match="*[contains(@class, ' topic/topic ')]/*[contains(@class, ' topic/title ')]" mode="getTitle">
    <xsl:variable name="topic" select="ancestor-or-self::*[contains(@class, ' topic/topic ')][1]" />
    <xsl:variable name="id" select="$topic/@id" />
    <xsl:variable name="mapTopics" select="key('map-id', $id)" />
    <fo:inline>
      <xsl:for-each select="$mapTopics[1]">
        <xsl:variable name="depth" select="count(ancestor-or-self::*[contains(@class, ' map/topicref')])" />
        <xsl:choose>
          <xsl:when test="parent::opentopic:map and contains(@class, ' bookmap/bookmap ')" />
          <xsl:when test="ancestor-or-self::*[contains(@class, ' bookmap/frontmatter ') or&#xA;                                              contains(@class, ' bookmap/backmatter ')]" />
          <xsl:when test="ancestor-or-self::*[contains(@class, ' bookmap/appendix ')] and&#xA;                          $e:number-levels[$depth]">
            <xsl:number count="*[contains(@class, ' map/topicref ')]&#xA;                                [ancestor-or-self::*[contains(@class, ' bookmap/appendix ')]] " format="A.1.1" level="multiple" />
          </xsl:when>
          <xsl:when test="$e:number-levels[$depth]">
            <xsl:number count="*[contains(@class, ' map/topicref ')]&#xA;                                [not(ancestor-or-self::*[contains(@class, ' bookmap/frontmatter ')])]" format="1.1" level="multiple" />
          </xsl:when>
        </xsl:choose>
      </xsl:for-each>
    </fo:inline>
    <xsl:value-of select="' '" />
    <xsl:apply-templates />
  </xsl:template>
  <xsl:template name="getNavTitle">
    <xsl:variable name="topicref" select="key('map-id', @id)[1]" />
    <xsl:choose>
      <xsl:when test="$topicref/@locktitle = 'yes' and $topicref/*[contains(@class, ' map/topicmeta ')]/*[contains(@class, ' topic/navtitle ')]">
        <xsl:apply-templates select="$topicref/*[contains(@class, ' map/topicmeta ')]/*[contains(@class, ' topic/navtitle ')]/node()" />
      </xsl:when>
      <xsl:when test="$topicref/@locktitle = 'yes' and $topicref/@navtitle">
        <xsl:value-of select="$topicref/@navtitle" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="*[contains(@class,' topic/title ')]/node()" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="*[contains(@class, ' topic/fig ')]/*[contains(@class, ' topic/title ')]" mode="fig.title-number">
    <xsl:value-of select="count(key('enumerableByClass', 'topic/fig')[. &lt;&lt; current()])" />
  </xsl:template>
</xsl:stylesheet>
